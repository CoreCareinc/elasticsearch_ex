name: Continuous Integration

on:
  push:
    branches:
      - "*"
    paths-ignore:
      - "*.md"
    tags-ignore:
      - "*"
  pull_request:

concurrency:
  group: ${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  compile-dev:
    name: "Compile dev"
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    needs:
      - setup-deps
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Set up Erlang and Elixir
        id: beam
        uses: erlef/setup-beam@v1
        with:
          version-type: "strict"
          version-file: ".tool-versions"
          install-hex: true
          install-rebar: true

      - name: Restore the cache
        id: cache_restore
        uses: actions/cache/restore@v3
        with:
          key: ${{ runner.os }}-${{ runner.arch }}-erlang-${{ steps.beam.outputs.otp-version }}-elixir-${{ steps.beam.outputs.elixir-version }}-mix-dev-${{ hashFiles('mix.lock') }}
          restore-keys: ${{ runner.os }}-${{ runner.arch }}-erlang-${{ steps.beam.outputs.otp-version }}-elixir-${{ steps.beam.outputs.elixir-version }}-mix-dev-
          path: |
            deps/
            _build/dev/

      - name: Compile the project
        if: steps.cache_restore.outputs.cache-hit != 'true'
        env:
          MIX_ENV: dev
        run: |
          mix deps.get
          mix deps.compile
          mix compile

      - name: Save cache
        uses: actions/cache/save@v3
        if: steps.cache_restore.outputs.cache-hit != 'true'
        with:
          key: ${{ runner.os }}-${{ runner.arch }}-erlang-${{ steps.beam.outputs.otp-version }}-elixir-${{ steps.beam.outputs.elixir-version }}-mix-dev-${{ hashFiles('mix.lock') }}
          path: |
            deps/
            _build/dev/

  compile-test:
    name: "Compile test"
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    needs:
      - setup-deps
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Set up Erlang and Elixir
        id: beam
        uses: erlef/setup-beam@v1
        with:
          version-type: "strict"
          version-file: ".tool-versions"
          install-hex: true
          install-rebar: true

      - name: Restore the cache
        id: cache_restore
        uses: actions/cache/restore@v3
        with:
          key: ${{ runner.os }}-${{ runner.arch }}-erlang-${{ steps.beam.outputs.otp-version }}-elixir-${{ steps.beam.outputs.elixir-version }}-mix-test-${{ hashFiles('mix.lock') }}
          restore-keys: ${{ runner.os }}-${{ runner.arch }}-erlang-${{ steps.beam.outputs.otp-version }}-elixir-${{ steps.beam.outputs.elixir-version }}-mix-test-
          path: |
            deps/
            _build/test/

      - name: Compile the project
        if: steps.cache_restore.outputs.cache-hit != 'true'
        env:
          MIX_ENV: test
        run: |
          mix deps.get
          mix deps.compile
          mix compile

      - name: Save cache
        uses: actions/cache/save@v3
        if: steps.cache_restore.outputs.cache-hit != 'true'
        with:
          key: ${{ runner.os }}-${{ runner.arch }}-erlang-${{ steps.beam.outputs.otp-version }}-elixir-${{ steps.beam.outputs.elixir-version }}-mix-test-${{ hashFiles('mix.lock') }}
          path: |
            deps/
            _build/test/

  format:
    name: Check formatting
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    needs:
      - compile-dev
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Set up Erlang and Elixir
        id: beam
        uses: erlef/setup-beam@v1
        with:
          version-type: "strict"
          version-file: ".tool-versions"
          install-hex: true
          install-rebar: true

      - name: Restore build
        uses: actions/cache/restore@v3
        with:
          fail-on-cache-miss: true
          key: ${{ runner.os }}-${{ runner.arch }}-erlang-${{ steps.beam.outputs.otp-version }}-elixir-${{ steps.beam.outputs.elixir-version }}-mix-dev-
          path: |
            deps/
            _build/dev/

      - name: Format code
        run: mix format --check-formatted

  credo:
    name: Run Credo
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    needs:
      - compile-dev
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Set up Erlang and Elixir
        id: beam
        uses: erlef/setup-beam@v1
        with:
          version-type: "strict"
          version-file: ".tool-versions"
          install-hex: true
          install-rebar: true

      - name: Restore build
        uses: actions/cache/restore@v3
        with:
          fail-on-cache-miss: true
          key: ${{ runner.os }}-${{ runner.arch }}-erlang-${{ steps.beam.outputs.otp-version }}-elixir-${{ steps.beam.outputs.elixir-version }}-mix-dev-
          path: |
            deps/
            _build/dev/

      - name: Run credo
        run: mix credo --format sarif

  dialyxir:
    name: Run Dialyxir
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    needs:
      - compile-dev
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Set up Erlang and Elixir
        id: beam
        uses: erlef/setup-beam@v1
        with:
          version-type: "strict"
          version-file: ".tool-versions"
          install-hex: true
          install-rebar: true

      - name: Restore build
        uses: actions/cache/restore@v3
        with:
          fail-on-cache-miss: true
          key: ${{ runner.os }}-${{ runner.arch }}-erlang-${{ steps.beam.outputs.otp-version }}-elixir-${{ steps.beam.outputs.elixir-version }}-mix-dev-
          path: |
            deps/
            _build/dev/

      - name: Restore cache
        id: cache_restore
        uses: actions/cache/restore@v3
        with:
          key: ${{ runner.os }}-${{ runner.arch }}-erlang-${{ steps.beam.outputs.otp-version }}-elixir-${{ steps.beam.outputs.elixir-version }}-mix-dialyxir-${{ hashFiles('mix.lock') }}
          restore-keys: ${{ runner.os }}-${{ runner.arch }}-erlang-${{ steps.beam.outputs.otp-version }}-elixir-${{ steps.beam.outputs.elixir-version }}-mix-dialyxir-
          path: priv/plts/

      - name: Create Dialyxir PLTs
        if: steps.cache_restore.outputs.cache-hit != 'true'
        run: mix dialyzer --plt

      - name: Save cache
        uses: actions/cache/save@v3
        if: steps.cache_restore.outputs.cache-hit != 'true'
        with:
          key: ${{ runner.os }}-${{ runner.arch }}-erlang-${{ steps.beam.outputs.otp-version }}-elixir-${{ steps.beam.outputs.elixir-version }}-mix-dialyxir-${{ hashFiles('mix.lock') }}
          path: priv/plts/

      - name: Run dialyzer
        run: mix dialyzer --format github

  test:
    name: Run tests
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    needs:
      - compile-test
    # services:
    #   elasticsearch:
    #     image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    #     ports: ["9200:9200"]
    #     env:
    #       discovery.type: "single-node"
    #       ELASTIC_PASSWORD: "elastic"
    #       ES_JAVA_OPTS: "-Xms512m -Xmx512m"

    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Set up Erlang and Elixir
        id: beam
        uses: erlef/setup-beam@v1
        with:
          version-type: "strict"
          version-file: ".tool-versions"
          install-hex: true
          install-rebar: true

      - name: Restore build
        uses: actions/cache/restore@v3
        with:
          fail-on-cache-miss: true
          key: ${{ runner.os }}-${{ runner.arch }}-erlang-${{ steps.beam.outputs.otp-version }}-elixir-${{ steps.beam.outputs.elixir-version }}-mix-test-
          path: |
            deps/
            _build/test/

      - name: Run tests
        run: mix test
